<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {

    var TABLE_PROCESSEDSTATISTICS = "ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_PROCESSEDSTATISTICS";
    var TABLE_OPERATOR_SUMMARY = "ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_OPERATOR_SUMMARY";
    var TABLE_API_SUMMARY = "ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_API_SUMMARY";
    var ROLE_OPERATORADMIN= "operatoradmin";
    var ROLE_CUTOMERCARE = "customercare";

    response.contentType = 'application/json';
    var action = request.getParameter("action");
    var carbon = require('carbon');

    var log = new Log();

    include("../HubAnalytics-Gadget-Commons/controller-util.jag");

    var loggedInUser = getLoggedInUser();

    if (action === "getLoggedInUser") {
        var jsonUser = {"LoggedInUser": loggedInUser};
        print(jsonUser);
        return;
    }

    if(action === 'getDataForTable'){

        var providerAPI = require('js/core/batch-provider-api.js');
        var providerConf={};
        providerConf.tableName=TABLE_PROCESSEDSTATISTICS;
        providerConf.query="";
        providerConf.sort={};

        var sortfield =request.getParameter("columns["+request.getParameter("order[0][column]")+"][data]");
        var sortType = request.getParameter("order[0][dir]");

        if(sortfield.trim() == ""){
            sortfield = "responseTime";
        }

        providerConf.sort.field=sortfield;
        providerConf.sort.type=sortType.toUpperCase();

        var start=request.getParameter("start");
        var length=request.getParameter("length");
        var draw=request.getParameter("draw");
        var search=request.getParameter("search[value]");

        var serviceProviderId = request.getParameter("a[serviceProvider]");
        var operator = request.getParameter("a[operator]");
        var operatorList = request.getParameter("a[operatorList][]");

        var spIdList = request.getParameter("a[spIdList][]");
        var appList = request.getParameter("a[appList][]");

        var application = request.getParameter("a[application]");
        var dateEnd = request.getParameter("a[dateEnd]");
        var dateStart = request.getParameter("a[dateStart]");
        if (loggedInUser.isOperatorAdmin || loggedInUser.isCustomerCareUser){
            var operatorQuery = "operatorName:"+loggedInUser.operatorNameInProfile;
            providerConf.query = concatQuery(providerConf.query, operatorQuery);
        }
        var recordsTotal=providerAPI.getRecordCount(providerConf);

        providerConf.query = "responseTime:["+dateStart+" TO "+dateEnd+"] ";
        if(search != null && search != undefined && search !="") {
            providerConf.query = concatQuery(providerConf.query,createSearchQuery(search, "jsonBody"));
        }
        providerConf.query = createQuery(operator, operatorList, providerConf.query, "operatorName");
        providerConf.query = createQuery(serviceProviderId, spIdList, providerConf.query, "serviceProviderId");
        providerConf.query = createQuery(application, appList, providerConf.query, "applicationId");
        providerConf.query = createQuery("sb", appList, providerConf.query, "direction");

        log.info("providerConf.query >> "+providerConf.query);
        var recordsFiltered=providerAPI.getRecordCount(providerConf);

        var resultPre = stringify( providerAPI.getDataBySearch(providerConf, start, length));
        var result = resultPre.replace(/\r?\n|\r/g, " dd ");
        result = '{  "draw": '+draw+', "recordsTotal": '+recordsTotal+',  "recordsFiltered": '+recordsFiltered+',  "data":' + result+' }';
        print(result);

    } else if(action === 'getData'){

        var PROVIDER_NAME = 'provider-name';
        var PROVIDER_CONF = 'provider-conf';
        var data = request.getContent();
        var providerConf = data[PROVIDER_CONF];

        var providerAPI = require('js/core/batch-provider-api.js');

        providerConf.query="";
        var operator = data.operatorName;

        if (providerConf[PROVIDER_NAME] == "operator"){
            providerConf.tableName = TABLE_OPERATOR_SUMMARY
        } else if (providerConf[PROVIDER_NAME] == "operatorsp"){
            providerConf.tableName = TABLE_API_SUMMARY;
            providerConf.query = createQuery(data.operatorName, data.operatorNames, providerConf.query, "operatorName");
        } else if (providerConf[PROVIDER_NAME] == "app"){
            providerConf.tableName = TABLE_API_SUMMARY;
            providerConf.query = createQuery(data.serviceProvider, data.spIds, providerConf.query, "serviceProviderId");
            providerConf.query = createQuery(data.operatorName, data.operatorNames, providerConf.query, "operatorName");
        }

        if (loggedInUser.isOperatorAdmin || loggedInUser.isCustomerCareUser){
            var operatorQuery = "operatorName:"+loggedInUser.operatorNameInProfile;
            providerConf.query = concatQuery(providerConf.query, operatorQuery);
        }

        print(providerAPI.getData(providerConf));
    }

}());

function concatQuery(query, newQuery){
    query +=( (query != null) &&   (query.trim().length > 0))?" AND ":"";
    return query + newQuery;
};

function createQuery(provider, providerList, baseQuery, columnName) {

    if( provider != null && provider != undefined && providerList != null && provider != "" && providerList != 0 ) {
        if( (provider.toString().trim().toUpperCase() == 'ALL' || provider == 0)) {

            var operatorListText = "";
            for (var p in providerList){
                operatorListText += providerList[p].toString().trim()+" ";
            }
            return concatQuery(baseQuery, columnName+": ("+operatorListText+")");

        }else {

            return concatQuery(baseQuery, columnName+": "+provider.toString().trim());
        }
    }
    else
    {
        return  baseQuery;
    }
};

function createSearchQuery(searchText, columnName) {
    var query = "";
    var search = searchText.trim();
        if(search.indexOf(" ") != -1) {
            var searchArray = search.split(" ");
            var a = 0;
            for (var p in searchArray) {
                var text = searchArray[p].toString().trim();
                a++;
                if(text != "") {
                    query = concatQuery(query , columnName + ":" + text);
                }
            }
        }
        else {
            query = columnName + ":"+search;
        }
    return query;
};


function loginfo(text){
    log.info( text +" >> "+text);
};

%>