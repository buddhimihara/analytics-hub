/* Enter a unique ExecutionPlan */
@Plan:name('HubAnalytics-ExecutionPlan-GenericReports')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */


@Import('org.wso2telco.analytics.hub.stream.responseStatistics:1.0.0')
define stream getResponse (meta_clientType string, consumerKey string, context string, apiVersion string, api string, resourcePath string, method string,
version string, responseTime long, serviceTime long, serviceProvider string, tenantDomain string, hostName string, apiPublisher string, applicationName string,
requestId string, operatorId string, responseCode string, msisdn string,direction string, jsonBody string,
serviceProviderId string, spUserId string, spConsumerKey string, operatorName string, apiPublisherID string, apiID string,
department string, applicationId string);

@Export('org.wso2telco.analytics.hub.stream.processedStatistics:1.0.0')
define stream processedResponse(api string, resourcePath string, method string, responseTime long, serviceTime long, serviceProvider string,
apiPublisher string, applicationName string,requestId string, operatorId string,responseCode string,isSuccess bool,msisdn string,
direction string,jsonBody string,serviceProviderId string, spUserId string, spConsumerKey string,errorMessageId string,
errorText string,responseTimeRange string,year int, month int, day int, hour int, operatorName string, apiPublisherID string,
apiID string, department string, applicationId string);


/**
* Extracts the year,month,day and hour from responseTime of the northbound response and
* confirms the operatorID value is a single value and not a role list
*/
@info(name = 'query1')
from getResponse [((operatorId is null) == false) and (not(str:contains(operatorId,"[")))]#log('Message Received to Analytics .... ')
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,msisdn,direction,jsonBody,serviceProviderId,spUserId,spConsumerKey,
time:extract(responseTime,'year') as year,time:extract(responseTime,'month') as month,time:extract(responseTime,'day') as day,time:extract(responseTime,'hour') as hour,
operatorName, apiPublisherID, apiID, department, applicationId
insert into tempPreProcessedResponse;

/**
* Extracts the year,month,day and hour from responseTime of the northbound response and
* confirms the operatorID value is a role list and contains the hub-publisher role
*/
@info(name = 'query2')
from getResponse [ ((operatorId is null) == false) and (str:contains(operatorId,"hub-") and str:contains(operatorId,"-publisher"))]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,str:substr(operatorId, '(?<=hub-)(.*)(?=-publisher)') as operatorId,responseCode,msisdn,direction,jsonBody,serviceProviderId,spUserId,spConsumerKey,
time:extract(responseTime,'year') as year,time:extract(responseTime,'month') as month,time:extract(responseTime,'day') as day,time:extract(responseTime,'hour') as hour,
operatorName, apiPublisherID, apiID, department, applicationId
insert into tempPreProcessedResponse;

/**
* Extracts the year,month,day and hour from responseTime of the northbound response and
* confirms the operatorID value is a role list and not a single value and also not a hub-publisher role
*/
@info(name = 'query3')
from getResponse [((operatorId is null) == true) or ((str:contains(operatorId,"[")) and (not(str:contains(operatorId,"-publisher"))))]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,'None' as operatorId ,responseCode,msisdn,direction,jsonBody,serviceProviderId,spUserId,spConsumerKey,
time:extract(responseTime,'year') as year,time:extract(responseTime,'month') as month,time:extract(responseTime,'day') as day,time:extract(responseTime,'hour') as hour,
operatorName, apiPublisherID, apiID, department, applicationId
insert into tempPreProcessedResponse;


/**
* Identifying the success response
*/
@info(name = 'query4')
from tempPreProcessedResponse [convert(responseCode,'int') >= 200 and convert(responseCode,'int') < 300]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,true as isSuccess,msisdn,direction,jsonBody,serviceProviderId,spUserId,spConsumerKey,
year,month,day,hour,operatorName, apiPublisherID, apiID, department, applicationId
insert into tempProcessedResponse;

/**
* Identifying the failure response
*/
@info(name = 'query5')
from tempPreProcessedResponse [convert(responseCode,'int') >= 300 and convert(responseCode,'int') < 600]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,false as isSuccess,msisdn,direction,jsonBody,serviceProviderId,spUserId,spConsumerKey,
year,month,day,hour,operatorName, apiPublisherID, apiID, department, applicationId
insert into tempProcessedResponse;


/**
* Creates a temporary stream for the failure response, including relevant fields
*/
@info(name = 'query6')
from tempProcessedResponse [ isSuccess == false]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,isSuccess,msisdn,direction,jsonBody,serviceProviderId,spUserId,spConsumerKey, '' as errorMessageId, '' as errorText, '' as responseTimeRange,year, month,day,hour,
operatorName, apiPublisherID, apiID, department, applicationId
insert into tempFailurePreProcessedResponse;


/**
* Handles service exception of failure response
* Add an empty string for the responseTimeRange
*/
@info(name = 'query7')
from tempFailurePreProcessedResponse [(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'requestError.serviceException') is null) == false]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,isSuccess,msisdn,direction,jsonBody,serviceProviderId,spUserId,spConsumerKey,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'requestError.serviceException.messageId'),'string') as errorMessageId,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'requestError.serviceException.text'),'string') as errorText, '' as responseTimeRange,
year, month,day,hour,operatorName, apiPublisherID, apiID, department, applicationId
insert into tempFailureProcessedResponse;


/**
* Handles service exception of failure response 
* Add an empty string for the responseTimeRange for direction git nb
*/
@info(name = 'query7.1')
from tempFailurePreProcessedResponse [(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'subscription.destinationAddresses[0].status') is null) == false]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,isSuccess,msisdn,direction,jsonBody,serviceProviderId,spUserId,spConsumerKey,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'subscription.destinationAddresses[0].status'),'string') as errorMessageId,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'subscription.destinationAddresses[0].status'),'string') as errorText, '' as responseTimeRange,
year, month,day,hour,operatorName, apiPublisherID, apiID, department, applicationId
insert into tempFailureProcessedResponse;


/**
* Handles policy exception of failure response
* Add an empty string for the responseTimeRange
*/
@info(name = 'query8')
from tempFailurePreProcessedResponse [(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'requestError.policyException') is null) == false]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,isSuccess,msisdn, direction,jsonBody,serviceProviderId,spUserId,spConsumerKey,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'requestError.policyException.messageId'),'string') as errorMessageId,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'requestError.policyException.text'),'string') as errorText,'' as responseTimeRange,
year, month,day,hour,operatorName, apiPublisherID, apiID, department, applicationId
insert into tempFailureProcessedResponse;

/**
*  Creates a temporary stream for the success response, including relevant fields
*/

@info(name ='query9')
from tempProcessedResponse[isSuccess == true]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,isSuccess,msisdn, direction,jsonBody,serviceProviderId,spUserId,spConsumerKey,
'' as errorMessageId, '' as errorText, '' as responseTimeRange,year,month,day,hour,
operatorName, apiPublisherID, apiID, department, applicationId
insert into tempSuccessPreProcessedResponse;

/**
* Handles Service time for success, if the service Time is between 0-10
*/

@info(name ='query10')
from tempSuccessPreProcessedResponse[(convert(serviceTime,'int') >= 0) and (convert(serviceTime,'int') <= 10)]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,isSuccess,msisdn, direction,jsonBody,serviceProviderId,spUserId,spConsumerKey,
'' as errorMessageId, '' as errorText, '0000-0010' as responseTimeRange,year,month,day,hour,
operatorName, apiPublisherID, apiID, department, applicationId
insert into processedResponse;

/**
* Handles Service time for success, if the service Time is between 11-100
*/
@info(name ='query11')
from tempSuccessPreProcessedResponse[(convert(serviceTime,'int') > 10) and (convert(serviceTime,'int') <= 100)]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,isSuccess,msisdn,direction,jsonBody,serviceProviderId,spUserId,spConsumerKey, '' as errorMessageId, '' as errorText, '0011-0100' as responseTimeRange,year,month,day,hour,
operatorName, apiPublisherID, apiID, department, applicationId
insert into processedResponse;

/**
* Handles Service time for success, if the service Time is between 101-1000
*/
@info(name ='query12')
from tempSuccessPreProcessedResponse[(convert(serviceTime,'int') > 100) and (convert(serviceTime,'int') <= 1000)]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,isSuccess,msisdn,direction, jsonBody,serviceProviderId,spUserId,spConsumerKey,'' as errorMessageId, '' as errorText,'0101-1000' as responseTimeRange,year,month,day,hour,
operatorName, apiPublisherID, apiID, department, applicationId
insert into processedResponse;

/**
* Handles Service time for success, if the service Time is greater than 1000
*/
@info(name ='query13')
from tempSuccessPreProcessedResponse[(convert(serviceTime,'int') > 1000)]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,isSuccess,msisdn,direction,jsonBody,serviceProviderId,spUserId,spConsumerKey, '' as errorMessageId, '' as errorText, '>1000' as responseTimeRange,year,month,day,hour,
operatorName, apiPublisherID, apiID, department, applicationId
insert into processedResponse;

/**
* Handles Service time for failure, if the service Time is between 0-10
*/

@info(name ='query14')
from tempFailureProcessedResponse[(convert(serviceTime,'int') >= 0) and (convert(serviceTime,'int') <= 10)]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,isSuccess,msisdn, direction,jsonBody,serviceProviderId,spUserId,spConsumerKey,errorMessageId, errorText, '0000-0010' as responseTimeRange,year,month,day,hour,
operatorName, apiPublisherID, apiID, department, applicationId
insert into processedResponse;

/**
* Handles Service time for failure, if the service Time is between 11-100
*/
@info(name ='query15')
from tempFailureProcessedResponse[(convert(serviceTime,'int') > 10) and (convert(serviceTime,'int') <= 100)]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,isSuccess,msisdn,direction,jsonBody,serviceProviderId,spUserId,spConsumerKey,errorMessageId, errorText, '0011-0100' as responseTimeRange,year,month,day,hour,
operatorName, apiPublisherID, apiID, department, applicationId
insert into processedResponse;

/**
* Handles Service time for failure, if the service Time is between 101-1000
*/
@info(name ='query16')
from tempFailureProcessedResponse[(convert(serviceTime,'int') > 100) and (convert(serviceTime,'int') <= 1000)]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,isSuccess,msisdn,direction, jsonBody,serviceProviderId,spUserId,spConsumerKey,errorMessageId, errorText,'0101-1000' as responseTimeRange,year,month,day,hour,
operatorName, apiPublisherID, apiID, department, applicationId
insert into processedResponse;

/**
* Handles Service time for failure, if the service Time is greater than 1000
*/
@info(name ='query17')
from tempFailureProcessedResponse[(convert(serviceTime,'int') > 1000)]
select api,resourcePath,method,responseTime,serviceTime,serviceProvider,apiPublisher,applicationName,requestId,operatorId,responseCode,isSuccess,msisdn,direction,jsonBody, serviceProviderId,spUserId,spConsumerKey,errorMessageId,errorText, '>1000' as responseTimeRange,year,month,day,hour,
operatorName, apiPublisherID, apiID, department, applicationId
insert into processedResponse;

